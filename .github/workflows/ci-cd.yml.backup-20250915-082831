name: "ü§ñ Chatbot ‚Äì CI/CD Pipeline"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: "Destino do deploy"
        required: false
        default: "production"
        type: choice
        options: [ staging, production ]

# ----------------------------------------------------------------------
# PAR√ÇMETROS GERAIS
# ----------------------------------------------------------------------

env:
  SERVICE_NAME: chatbot
  TZ: America/Sao_Paulo

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
  cancel-in-progress: false

# ----------------------------------------------------------------------
# JOB 1 ‚ñ∏ VALIDA√á√ÉO DO WORKSPACE
# ----------------------------------------------------------------------

jobs:
  validate-environment:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - uses: actions/checkout@v4

      - name: "Guard: validar configura√ß√µes obrigat√≥rias do Microservi√ßo"
        shell: bash
        run: |
          chmod +x .github/workflows/scripts/validate-required-files.sh
          ./.github/workflows/scripts/validate-required-files.sh microservice

      - name: "Guard: proibir r2dbc:h2 fora de testes"
        shell: bash
        run: |
          set -euo pipefail
          FOUND=$(grep -R --line-number --include='*.yml' --include='*.yaml' --include='*.properties' "r2dbc:h2" src || true)
          if echo "$FOUND" | grep -v "src/test/" | grep -q "r2dbc:h2"; then
            echo "‚ùå r2dbc:h2 encontrado fora de src/test" >&2
            echo "$FOUND" >&2
            exit 1
          fi

      - name: "Guard: depend√™ncia H2 n√£o‚Äëtest"
        shell: bash
        run: |
          ./mvnw -q dependency:list -DincludeScope=compile -DoutputFile=deps.txt
          if grep -E "com.h2database:h2|io.r2dbc:r2dbc-h2" deps.txt; then
            echo "‚ùå H2 presente em scope de produ√ß√£o" >&2
            exit 1
          fi

# ----------------------------------------------------------------------
# JOB 2 ‚ñ∏ BUILD + TEST + SAST/SCA
# ----------------------------------------------------------------------

  build-test-scan:
    needs: validate-environment
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java 24 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "24"
          cache: maven

      - name: Build + Test + Package
        run: ./mvnw package

      - name: Upload JAR artefact
        uses: actions/upload-artifact@v4
        with:
          name: chatbot-jar
          path: target/*.jar
          retention-days: 1

# ----------------------------------------------------------------------
# JOB 3 ‚ñ∏ BUILD DA IMAGEM + PUSH GHCR
# ----------------------------------------------------------------------

  build-image:
    needs: [ build-test-scan, security-analysis ]
    runs-on: ubuntu-latest
    timeout-minutes: 8
    outputs:
      image: ${{ steps.build.outputs.image }}
    permissions:
      packages: write
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Download JAR artefact
        uses: actions/download-artifact@v4
        with:
          name: chatbot-jar
          path: target

      # ‚îÄ‚îÄ‚îÄ OIDC login no Azure para acessar Key Vault ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false

      - name: Extrair secrets chatbot (Key Vault) ‚ñ∂ arquivos tempor√°rios
        id: secrets
        shell: bash
        run: |
          set -euo pipefail
          VAULT_ENDPOINT="${{ secrets.AZURE_KEYVAULT_ENDPOINT }}"
          if [[ "$VAULT_ENDPOINT" =~ https://([^.]+)\.vault\.azure\.net ]]; then
            VAULT="${BASH_REMATCH[1]}"
          else
            echo "ERROR: Invalid AZURE_KEYVAULT_ENDPOINT format: $VAULT_ENDPOINT" >&2
            exit 1
          fi
          
          echo "Loading secrets from Azure Key Vault: $VAULT" >&2
          
          # Chatbot secrets
          REDIS_PASS=$(az keyvault secret show --vault-name "$VAULT" --name conexao-de-sorte-redis-password --query value -o tsv 2>/dev/null)
          JWT_SECRET=$(az keyvault secret show --vault-name "$VAULT" --name conexao-de-sorte-jwt-secret --query value -o tsv 2>/dev/null)
          
          # Validar secrets obrigat√≥rios
          if [ -z "$REDIS_PASS" ] || [ -z "$JWT_SECRET" ]; then
            echo "ERROR: Required Chatbot secrets not found in Azure Key Vault $VAULT" >&2
            exit 1
          fi
          
          # Mascarar secrets nos logs
          echo "::add-mask::$REDIS_PASS"
          echo "::add-mask::$JWT_SECRET"
          
          # Salvar em arquivos tempor√°rios
          printf "%s" "$REDIS_PASS" > redis_pass.txt
          printf "%s" "$JWT_SECRET" > jwt_secret.txt

      # ‚îÄ‚îÄ‚îÄ Login no GHCR ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push Chatbot
        id: build
        run: |
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          TIMESTAMP=$(date +'%d-%m-%Y-%H-%M')
          IMAGE=ghcr.io/$REPO_LOWER/conexao-de-sorte-backend-chatbot:${TIMESTAMP}
          
          # Build com secrets
          docker buildx build \
            --tag "$IMAGE" \
            --push \
            --provenance=true \
            --sbom=true \
            --secret id=redis_password,src=redis_pass.txt \
            --secret id=jwt_secret,src=jwt_secret.txt \
            --file Dockerfile .
          
          # Limpar arquivos de secrets
          rm -f redis_pass.txt jwt_secret.txt
          
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

# ----------------------------------------------------------------------
# JOB 3.5 ‚ñ∏ AN√ÅLISE DE SEGURAN√áA (similar aos demais servi√ßos)
# ----------------------------------------------------------------------

  security-analysis:
    needs: build-test-scan
    runs-on: ubuntu-latest
    timeout-minutes: 8
    continue-on-error: true # Tempor√°rio para garantir o deploy
    steps:
      - uses: actions/checkout@v4

      - name: Verificar score de seguran√ßa do Microservi√ßo
        run: |
          chmod +x .github/workflows/scripts/security-analysis.sh
          ./.github/workflows/scripts/security-analysis.sh microservice 4

# ----------------------------------------------------------------------
# JOB 4 ‚ñ∏ DEPLOY SELF‚ÄëHOSTED (Docker Swarm + secrets)
# ----------------------------------------------------------------------

  deploy-selfhosted:
    needs: build-image
    runs-on: [ self-hosted, Linux, X64, conexao, conexao-de-sorte-backend-chatbot ]
    timeout-minutes: 8
    if: |
      github.ref == 'refs/heads/main' &&
      (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production'))
    permissions:
      id-token: write
      contents: read
    steps:
      - name: "üîé Validar e configurar secrets Azure OIDC"
        shell: bash
        run: |
          set -euo pipefail
          MISSING=""
          [ -z "${{ secrets.AZURE_CLIENT_ID }}" ] && MISSING="$MISSING AZURE_CLIENT_ID"
          [ -z "${{ secrets.AZURE_TENANT_ID }}" ] && MISSING="$MISSING AZURE_TENANT_ID"
          [ -z "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ] && MISSING="$MISSING AZURE_SUBSCRIPTION_ID"
          [ -z "${{ secrets.AZURE_KEYVAULT_ENDPOINT }}" ] && MISSING="$MISSING AZURE_KEYVAULT_ENDPOINT"
          if [ -n "$MISSING" ]; then
            echo "‚ö†Ô∏è  PULANDO DEPLOY - Secrets ausentes:$MISSING";
            exit 0
          fi
          echo "‚úÖ Secrets OIDC validados"

      - name: Login GHCR (Self-hosted)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull imagem do GHCR
        run: docker pull "${{ needs.build-image.outputs.image }}"

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          auth-type: OIDC
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false

      - name: Sincronizar Key Vault ‚Üí Docker Secrets (chatbot)
        shell: bash
        run: |
          chmod +x .github/workflows/scripts/sync-azure-keyvault-secrets.sh
          ./.github/workflows/scripts/sync-azure-keyvault-secrets.sh "${{ secrets.AZURE_KEYVAULT_ENDPOINT }}" "chatbot"

      - name: üßπ Cleanup existing deployment
        run: |
          docker stack rm conexao-chatbot 2>/dev/null || true
          echo "‚è≥ Aguardando limpeza completa..."
          sleep 15
          docker container ls -q --filter "name=chatbot" | xargs -r docker stop
          docker container ls -aq --filter "name=chatbot" | xargs -r docker rm
          echo "‚úÖ Limpeza conclu√≠da"

      - name: Deploy via docker service (update/create)
        run: |
          set -euo pipefail
          IMAGE="${{ needs.build-image.outputs.image }}"
          SERVICE_NAME="${{ env.SERVICE_NAME }}"
          PORT=8090
          INTERNAL_PORT=8090
          NETWORK_NAME="conexao-network-swarm"

          docker network create --driver overlay "$NETWORK_NAME" 2>/dev/null || true

          echo "üîç Verificando se servi√ßo $SERVICE_NAME j√° existe..."
          if docker service ls --format '{{.Name}}' | grep -qx "$SERVICE_NAME"; then
            echo "üîÑ Servi√ßo j√° existe - executando UPDATE para nova imagem"
            timeout 90s docker service update \
              --image "$IMAGE" \
              --detach=false \
              --update-parallelism 1 \
              --update-delay 10s \
              "$SERVICE_NAME"
          else
            echo "üÜï Servi√ßo n√£o existe - executando CREATE"
            timeout 120s docker service create \
              --name "$SERVICE_NAME" \
              --image "$IMAGE" \
              --network "$NETWORK_NAME" \
              --detach=false \
              --publish ${PORT}:${INTERNAL_PORT} \
              --secret source=REDIS_HOST,target=REDIS_HOST \
              --secret source=REDIS_PORT,target=REDIS_PORT \
              --secret source=REDIS_PASSWORD,target=REDIS_PASSWORD \
              --secret source=REDIS_DATABASE,target=REDIS_DATABASE,value="5" \
              --secret source=JWT_SECRET,target=JWT_SECRET \
              --secret source=JWT_ISSUER,target=JWT_ISSUER \
              --secret source=CORS_ALLOWED_ORIGINS,target=CORS_ALLOWED_ORIGINS \
              --secret source=CORS_ALLOW_CREDENTIALS,target=CORS_ALLOW_CREDENTIALS \
              --env SPRING_PROFILES_ACTIVE=prod,azure \
              --env TZ=America/Sao_Paulo \
              --env SERVER_PORT=${INTERNAL_PORT} \
              --env AZURE_CLIENT_ID="${{ secrets.AZURE_CLIENT_ID }}" \
              --env AZURE_TENANT_ID="${{ secrets.AZURE_TENANT_ID }}" \
              --env AZURE_KEYVAULT_ENDPOINT="${{ secrets.AZURE_KEYVAULT_ENDPOINT }}" \
              --env AZURE_KEYVAULT_ENABLED=true \
              "$SERVICE_NAME" || {
                echo "‚ö†Ô∏è Service create atingiu timeout mas pode ter sido criado - verificando status..."
                if docker service ls --format '{{.Name}}' | grep -qx "$SERVICE_NAME"; then
                  echo "‚úÖ Servi√ßo criado com sucesso (detec√ß√£o p√≥s-timeout)"
                else
                  echo "‚ùå Falha no deploy - verificar logs"
                  docker service logs "$SERVICE_NAME" --tail 50 || true
                  exit 1
                fi
              }
          fi

      - name: Aguardar Chatbot estar pronto
        run: |
          echo "‚è≥ Aguardando Chatbot ficar pronto..."
          TIMEOUT=180
          ELAPSED=0
          
          while [ $ELAPSED -lt $TIMEOUT ]; do
            if docker service ls | grep -q "${SERVICE_NAME:-chatbot}.*1/1"; then
              echo "‚úÖ Chatbot est√° pronto!"
              break
            fi
            echo "‚è≥ Aguardando readiness... ($ELAPSED/$TIMEOUT segundos)"
            sleep 10
            ELAPSED=$((ELAPSED + 10))
          done
          
          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "‚ùå Chatbot n√£o ficou pronto em $TIMEOUT segundos"
            docker service ls | grep "${SERVICE_NAME:-chatbot}" || true
            docker service logs "$SERVICE_NAME" --tail 50 || true
            exit 1
          fi

      - name: Health‚Äëcheck Chatbot
        run: |
          echo "üîç Verificando sa√∫de do Chatbot..."
          SERVICE_CONTAINER=$(docker ps --filter "name=${SERVICE_NAME:-chatbot}" --format "{{.Names}}" | head -1 || echo "")
          if [ -n "$SERVICE_CONTAINER" ]; then
            echo "üåê Testando health endpoint..."
            docker exec "$SERVICE_CONTAINER" curl -f http://localhost:8090/actuator/health 2>/dev/null && echo "‚úÖ Chatbot health OK" || echo "‚ö†Ô∏è Chatbot health test failed"
          fi
          
          echo "üéâ Chatbot microservice deployment completed successfully!"
          echo "üåê API: https://chatbot.conexaodesorte.com.br"

# ----------------------------------------------------------------------
# JOB 5 ‚ñ∏ NOTIFY
# ----------------------------------------------------------------------

  notify:
    if: always()
    runs-on: ubuntu-latest
    needs: [ build-test-scan, deploy-selfhosted ]
    steps:
      - name: Slack notify
        env:
          WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          RESULT: ${{ needs.deploy-selfhosted.result }}
        shell: bash
        run: |
          if [ -z "$WEBHOOK" ]; then
            echo "‚ÑπÔ∏è Slack webhook n√£o configurado; etapa ignorada" && exit 0
          fi
          COLOR=good && [ "$RESULT" != "success" ] && COLOR=danger
          curl -X POST -H 'Content-type: application/json' \
               --data "{\"text\":\"Chatbot ‚Äì $RESULT\",\"attachments\":[{\"color\":\"$COLOR\"}]}" \
               "$WEBHOOK"
