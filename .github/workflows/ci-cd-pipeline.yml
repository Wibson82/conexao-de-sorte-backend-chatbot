name: CI/CD Pipeline - Chatbot Microservice

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'pom.xml'
      - '.github/workflows/**'
      - 'Dockerfile'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'pom.xml'
      - '.github/workflows/**'
      - 'Dockerfile'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/chatbot
  AZURE_RESOURCE_GROUP: rg-conexao-de-sorte
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

permissions:
  contents: read
  packages: write
  id-token: write
  security-events: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Java 24
      uses: actions/setup-java@v4
      with:
        java-version: '24'
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run unit tests
      run: ./mvnw clean test -Dspring.profiles.active=test --no-transfer-progress
      
    - name: Run integration tests
      run: ./mvnw verify -Dspring.profiles.active=test --no-transfer-progress
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: target/surefire-reports/
        
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build and Push Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Java 24
      uses: actions/setup-java@v4
      with:
        java-version: '24'
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Build application
      run: ./mvnw clean package -DskipTests -Dspring.profiles.active=prod --no-transfer-progress
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3
      
    - name: Sign container image
      run: |
        echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --yes {}@${{ steps.build.outputs.digest }}

  deploy-azure:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Azure Login (OIDC)
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
        
    - name: Get secrets from Azure Key Vault
      id: keyvault
      uses: azure/get-keyvault-secrets@v1
      with:
        keyvault: ${{ secrets.AZURE_KEYVAULT_ENDPOINT }}
        secrets: |
          database-url,
          database-username,
          database-password,
          redis-host,
          redis-password,
          jwt-secret,
          app-encryption-key
          
    - name: Deploy to Azure Container Instances
      uses: azure/aci-deploy@v1
      with:
        resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
        dns-name-label: chatbot-${{ github.run_number }}
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        name: chatbot-microservice
        location: 'Brazil South'
        restart-policy: Always
        ports: 8080
        environment-variables: |
          SPRING_PROFILES_ACTIVE=prod
          SERVER_PORT=8080
        secure-environment-variables: |
          SPRING_DATASOURCE_URL=${{ steps.keyvault.outputs.database-url }}
          SPRING_DATASOURCE_USERNAME=${{ steps.keyvault.outputs.database-username }}
          SPRING_DATASOURCE_PASSWORD=${{ steps.keyvault.outputs.database-password }}
          SPRING_DATA_REDIS_HOST=${{ steps.keyvault.outputs.redis-host }}
          SPRING_DATA_REDIS_PASSWORD=${{ steps.keyvault.outputs.redis-password }}
          JWT_SECRET=${{ steps.keyvault.outputs.jwt-secret }}
          APP_ENCRYPTION_KEY=${{ steps.keyvault.outputs.app-encryption-key }}
          
    - name: Run health check
      run: |
        # Wait for container to start
        sleep 30
        
        # Get container instance FQDN
        FQDN=$(az container show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name chatbot-microservice \
          --query ipAddress.fqdn \
          --output tsv)
        
        # Health check
        curl -f http://$FQDN:8080/actuator/health || exit 1
        echo "Health check passed for http://$FQDN:8080"

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-azure]
    if: always()
    
    steps:
    - name: Deployment notification
      run: |
        if [ "${{ needs.deploy-azure.result }}" == "success" ]; then
          echo "✅ Chatbot microservice deployed successfully!"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi
