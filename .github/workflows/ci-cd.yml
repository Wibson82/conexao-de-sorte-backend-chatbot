name: 🎰 Chatbot Jogo do Bicho - CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Destino do deploy'
        required: false
        default: 'production'
        type: choice
        options: [production]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SERVICE_NAME: conexao-de-sorte-chatbot
  TZ: America/Sao_Paulo

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
  cancel-in-progress: false

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    name: 🏗️ Build and Test
    steps:
      - uses: actions/checkout@v4
      - name: Setup Java 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'
          cache: maven
      - name: Run unit tests
        run: ./mvnw clean test -Dspring.profiles.active=test
      - name: Build application
        run: ./mvnw clean package -DskipTests -Dspring.profiles.active=prod
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: chatbot-jogo-bicho-jar
          path: target/*.jar
          retention-days: 7

  build-image:
    runs-on: ubuntu-latest
    name: 🐳 Build Docker Image
    needs: build-and-test
    permissions:
      id-token: write
      contents: read
      packages: write
      attestations: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-name-lower: ${{ steps.image_name.outputs.image_name_lower }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4

      - name: Compute lowercase image name
        id: image_name
        run: |
          set -euo pipefail
          REPO='${{ env.IMAGE_NAME }}'
          echo "image_name_lower=$(echo "$REPO" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.image_name.outputs.image_name_lower }}
          tags: |
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYY-MM-DD-HHmmss'}}-{{sha}},enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Chatbot Jogo do Bicho
            org.opencontainers.image.description=Sistema reativo de apostas Jogo do Bicho com chatbot
            org.opencontainers.image.service=${{ env.SERVICE_NAME }}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          sbom: true
          provenance: mode=max
          cache-from: type=gha
          cache-to: type=gha,mode=max
          network: host
          build-args: |
            SERVICE_NAME=${{ env.SERVICE_NAME }}
            BUILD_DATE=${{ github.event.head_commit.timestamp || github.run_id }}
            VCS_REF=${{ github.sha }}
            VERSION=1.0.0

  sign-image:
    runs-on: ubuntu-latest
    name: ✍️ Sign & Verify (100% OIDC keyless)
    needs: build-image
    permissions:
      id-token: write
      contents: read
      packages: write
      attestations: write
    steps:
      - name: Verify OIDC token availability
        run: |
          echo "🔍 Verifying OIDC token is available..."
          if [ -z "${ACTIONS_ID_TOKEN_REQUEST_TOKEN:-}" ]; then
            echo "❌ OIDC token not available"
            exit 1
          fi
          echo "✅ OIDC token is available"
          
      - name: Resolve image digest ref
        id: ref
        run: |
          set -euo pipefail
          IMG="ghcr.io/${{ needs.build-image.outputs.image-name-lower }}@${{ needs.build-image.outputs.image-digest }}"
          echo "lower=$(echo "$IMG" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Install cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: v2.5.3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull digest
        run: docker pull "${{ steps.ref.outputs.lower }}"

      - name: Sign (keyless OIDC)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          echo "🔐 Signing container image with OIDC keyless signature..."
          cosign sign --yes "${{ steps.ref.outputs.lower }}"

      - name: Verify OIDC signature
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          echo "✅ Verifying OIDC keyless signature..."
          cosign verify \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            --certificate-identity-regexp "^https://github.com/${{ github.repository }}/\.github/workflows/.*@refs/heads/main$" \
            "${{ steps.ref.outputs.lower }}"
          echo "🎉 Container image signature verified successfully!"

  deploy-production:
    needs: [build-image, sign-image]
    runs-on: [self-hosted, hostinger-runner]
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    name: 🎰 Deploy to Production (self-hosted)
    permissions:
      id-token: write
      contents: read
      packages: read
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Load Azure Key Vault secrets
        run: |
          set -euo pipefail
          VAULT_ENDPOINT="${{ secrets.AZURE_KEYVAULT_ENDPOINT }}"
          if [[ "$VAULT_ENDPOINT" =~ https://([^.]+)\.vault\.azure\.net ]]; then
            VAULT="${BASH_REMATCH[1]}"
          else
            echo "ERROR: Invalid AZURE_KEYVAULT_ENDPOINT format: $VAULT_ENDPOINT" >&2
            exit 1
          fi
          
          echo "Loading secrets from Azure Key Vault: $VAULT" >&2
          echo "VAULT=$VAULT" >> "$GITHUB_ENV"

          get() { 
            echo "Fetching secret: $1" >&2
            SECRET_VALUE=$(az keyvault secret show --vault-name "$VAULT" --name "$1" --query value -o tsv 2>/dev/null)
            if [ $? -ne 0 ] || [ -z "$SECRET_VALUE" ]; then
              echo "ERROR: Secret $1 not found in Azure Key Vault $VAULT" >&2
              exit 1
            fi
            echo "$SECRET_VALUE"
          }

          # Database secrets (R2DBC para projetos reativos)
          echo "DB_R2DBC_URL=$(get conexao-de-sorte-database-r2dbc-url)" >> $GITHUB_ENV
          echo "DB_USERNAME=$(get conexao-de-sorte-database-username)" >> $GITHUB_ENV
          echo "DB_PASSWORD=$(get conexao-de-sorte-database-password)" >> $GITHUB_ENV
          echo "DB_JDBC_URL=$(get conexao-de-sorte-database-jdbc-url)" >> $GITHUB_ENV
          
          # Redis secrets
          echo "REDIS_HOST=$(get conexao-de-sorte-redis-host)" >> $GITHUB_ENV
          echo "REDIS_PORT=$(get conexao-de-sorte-redis-port)" >> $GITHUB_ENV
          echo "REDIS_PASSWORD=$(get conexao-de-sorte-redis-password)" >> $GITHUB_ENV
          echo "REDIS_DATABASE=$(get conexao-de-sorte-redis-database)" >> $GITHUB_ENV
          
          # JWT secrets
          echo "JWT_SECRET=$(get conexao-de-sorte-jwt-secret)" >> $GITHUB_ENV
          echo "JWT_JWKS_URI=$(get conexao-de-sorte-jwt-jwks-uri)" >> $GITHUB_ENV
          echo "JWT_ISSUER=$(get conexao-de-sorte-jwt-issuer)" >> $GITHUB_ENV
          
          # Azure Client Secret
          echo "AZURE_CLIENT_SECRET_VALUE=$(get conexao-de-sorte-azure-client-secret)" >> $GITHUB_ENV

          # Create secure secrets directory
          SECRETS_DIR=$(mktemp -d -p /tmp chatbot_secrets_XXXX)
          umask 077
          echo "SECRETS_DIR=$SECRETS_DIR" >> $GITHUB_ENV
          echo "Success: Azure Key Vault secrets loaded successfully" >&2

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Garantir rede Docker
        run: docker network inspect conexao-network >/dev/null 2>&1 || docker network create conexao-network

      - name: Pull & Run Chatbot (production)
        run: |
          set -euo pipefail
          IMAGE="ghcr.io/${{ needs.build-image.outputs.image-name-lower }}@${{ needs.build-image.outputs.image-digest }}"
          
          echo "🎰 Deploying Jogo do Bicho Chatbot: $IMAGE"
          
          # Create backup of current running container if exists
          if docker ps -q -f name=chatbot-jogo-bicho | grep -q .; then
            echo "📦 Creating backup of current chatbot..."
            docker tag chatbot-jogo-bicho chatbot-jogo-bicho:backup-$(date +%Y%m%d-%H%M%S) || true
          fi
          
          # Pull new image
          echo "📥 Pulling new chatbot image..."
          docker pull "$IMAGE"
          
          # Stop and remove current container
          echo "🛑 Stopping current chatbot..."
          docker stop chatbot-jogo-bicho || true
          docker rm chatbot-jogo-bicho || true

          # Create logs directory
          echo "📁 Creating chatbot logs directory..."
          mkdir -p $HOME/conexao-logs/chatbot-jogo-bicho
          
          # Run new chatbot container
          echo "🎰 Starting new chatbot container..."
          docker run -d \
            --name chatbot-jogo-bicho \
            --network conexao-network \
            --restart unless-stopped \
            -p 8089:8089 \
            --health-cmd="curl -f http://localhost:8089/actuator/health || exit 1" \
            --health-interval=30s --health-timeout=10s --health-retries=3 --health-start-period=60s \
            -v "${SECRETS_DIR}":/run/secrets:ro \
            -v $HOME/conexao-logs/chatbot-jogo-bicho:/app/logs \
            -e JAVA_TOOL_OPTIONS="-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -Xms512m -Xmx1536m -Djava.security.egd=file:/dev/./urandom -Djava.awt.headless=true" \
            -e SPRING_PROFILES_ACTIVE=prod,azure \
            -e ENVIRONMENT=production \
            -e SERVER_PORT=8089 \
            -e SPRING_CONFIG_IMPORT=optional:configtree:/run/secrets/ \
            -e TZ=${{ env.TZ }} \
            -e AZURE_CLIENT_ID="${{ secrets.AZURE_CLIENT_ID }}" \
            -e AZURE_TENANT_ID="${{ secrets.AZURE_TENANT_ID }}" \
            -e AZURE_CLIENT_SECRET="${AZURE_CLIENT_SECRET_VALUE}" \
            -e AZURE_KEYVAULT_ENDPOINT="${{ secrets.AZURE_KEYVAULT_ENDPOINT}}" \
            -e conexao_de_sorte_database_r2dbc_url="${DB_R2DBC_URL}" \
            -e conexao_de_sorte_database_username="${DB_USERNAME}" \
            -e conexao_de_sorte_database_password="${DB_PASSWORD}" \
            -e conexao_de_sorte_database_jdbc_url="${DB_JDBC_URL}" \
            -e SPRING_DATA_REDIS_HOST="${REDIS_HOST}" \
            -e SPRING_DATA_REDIS_PORT="${REDIS_PORT}" \
            -e SPRING_DATA_REDIS_PASSWORD="${REDIS_PASSWORD}" \
            -e SPRING_DATA_REDIS_DATABASE="${REDIS_DATABASE}" \
            -e conexao_de_sorte_jwt_secret="${JWT_SECRET}" \
            -e conexao_de_sorte_jwt_jwks_uri="${JWT_JWKS_URI}" \
            -e conexao_de_sorte_jwt_issuer="${JWT_ISSUER}" \
            --label "traefik.enable=true" \
            --label "traefik.docker.network=conexao-network" \
            --label "traefik.http.routers.chatbot-jogo-bicho.rule=Host(\`apostas.conexaodesorte.com.br\`)" \
            --label "traefik.http.routers.chatbot-jogo-bicho.entrypoints=websecure" \
            --label "traefik.http.routers.chatbot-jogo-bicho.tls.certresolver=letsencrypt" \
            --label "traefik.http.services.chatbot-jogo-bicho.loadbalancer.server.port=8089" \
            "$IMAGE"

          # Wait for container to be ready
          echo "⏳ Waiting for chatbot to be ready..."
          sleep 45
          
          # Health check
          echo "🔍 Performing chatbot health check..."
          for i in $(seq 1 12); do
            echo "⏳ Health check attempt $i/12..."
            if curl -fsS http://localhost:8089/actuator/health >/dev/null 2>&1; then
              echo "✅ Chatbot is healthy!"
              echo "🎰 Jogo do Bicho deployment successful!"
              break
            fi
            
            if [ "$i" -eq 12 ]; then
              echo "❌ Health check failed after 12 attempts"
              echo "📋 Container logs (last 100 lines):"
              docker logs chatbot-jogo-bicho --tail 100 || true
              rm -rf "${SECRETS_DIR}" || true
              exit 1
            fi
            sleep 25
          done

          echo "🧹 Cleaning up secrets and old images..."
          rm -rf "${SECRETS_DIR}" || true
          docker image prune -f --filter until=24h || true
          
          echo "✅ Chatbot Jogo do Bicho deployment completed successfully!"