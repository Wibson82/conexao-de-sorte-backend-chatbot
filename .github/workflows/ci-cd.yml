name: "🤖 Chatbot – CI/CD Pipeline"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: "Destino do deploy"
        required: false
        default: "production"
        type: choice
        options: [ staging, production ]

# ----------------------------------------------------------------------
# PARÂMETROS GERAIS
# ----------------------------------------------------------------------

env:
  SERVICE_NAME: chatbot
  TZ: America/Sao_Paulo

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
  cancel-in-progress: false

# ----------------------------------------------------------------------
# JOB 1 ▸ VALIDAÇÃO DO WORKSPACE
# ----------------------------------------------------------------------

jobs:
  validate-environment:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - uses: actions/checkout@v4

      - name: "Guard: proibir r2dbc:h2 fora de testes"
        shell: bash
        run: |
          set -euo pipefail
          FOUND=$(grep -R --line-number --include='*.yml' --include='*.yaml' --include='*.properties' "r2dbc:h2" src || true)
          if echo "$FOUND" | grep -v "src/test/" | grep -q "r2dbc:h2"; then
            echo "❌ r2dbc:h2 encontrado fora de src/test" >&2
            echo "$FOUND" >&2
            exit 1
          fi

      - name: "Guard: dependência H2 não‑test"
        shell: bash
        run: |
          ./mvnw -q dependency:list -DincludeScope=compile -DoutputFile=deps.txt
          if grep -E "com.h2database:h2|io.r2dbc:r2dbc-h2" deps.txt; then
            echo "❌ H2 presente em scope de produção" >&2
            exit 1
          fi

# ----------------------------------------------------------------------
# JOB 2 ▸ BUILD + TEST + SAST/SCA
# ----------------------------------------------------------------------

  build-test-scan:
    needs: validate-environment
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java 24 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "24"
          cache: maven

      - name: Build + Test + Package
        run: ./mvnw package

      - name: Upload JAR artefact
        uses: actions/upload-artifact@v4
        with:
          name: chatbot-jar
          path: target/*.jar
          retention-days: 1

# ----------------------------------------------------------------------
# JOB 3 ▸ BUILD DA IMAGEM + PUSH GHCR
# ----------------------------------------------------------------------

  build-image:
    needs: build-test-scan
    runs-on: ubuntu-latest
    timeout-minutes: 8
    outputs:
      image: ${{ steps.build.outputs.image }}
    permissions:
      packages: write
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Download JAR artefact
        uses: actions/download-artifact@v4
        with:
          name: chatbot-jar
          path: target

      # ─── OIDC login no Azure para acessar Key Vault ───────────────────
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false

      - name: Extrair secrets chatbot (Key Vault) ▶ arquivos temporários
        id: secrets
        shell: bash
        run: |
          set -euo pipefail
          VAULT_ENDPOINT="${{ secrets.AZURE_KEYVAULT_ENDPOINT }}"
          if [[ "$VAULT_ENDPOINT" =~ https://([^.]+)\.vault\.azure\.net ]]; then
            VAULT="${BASH_REMATCH[1]}"
          else
            echo "ERROR: Invalid AZURE_KEYVAULT_ENDPOINT format: $VAULT_ENDPOINT" >&2
            exit 1
          fi
          
          echo "Loading secrets from Azure Key Vault: $VAULT" >&2
          
          # Chatbot secrets
          REDIS_PASS=$(az keyvault secret show --vault-name "$VAULT" --name conexao-de-sorte-redis-password --query value -o tsv 2>/dev/null)
          JWT_SECRET=$(az keyvault secret show --vault-name "$VAULT" --name conexao-de-sorte-jwt-secret --query value -o tsv 2>/dev/null)
          
          # Validar secrets obrigatórios
          if [ -z "$REDIS_PASS" ] || [ -z "$JWT_SECRET" ]; then
            echo "ERROR: Required Chatbot secrets not found in Azure Key Vault $VAULT" >&2
            exit 1
          fi
          
          # Mascarar secrets nos logs
          echo "::add-mask::$REDIS_PASS"
          echo "::add-mask::$JWT_SECRET"
          
          # Salvar em arquivos temporários
          printf "%s" "$REDIS_PASS" > redis_pass.txt
          printf "%s" "$JWT_SECRET" > jwt_secret.txt

      # ─── Login no GHCR ────────────────────────────────────────────────
      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push Chatbot
        id: build
        run: |
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          TIMESTAMP=$(date +'%d-%m-%Y-%H-%M')
          IMAGE=ghcr.io/$REPO_LOWER/conexao-de-sorte-backend-chatbot:${TIMESTAMP}
          
          # Build com secrets
          docker buildx build \
            --tag "$IMAGE" \
            --push \
            --provenance=true \
            --sbom=true \
            --secret id=redis_password,src=redis_pass.txt \
            --secret id=jwt_secret,src=jwt_secret.txt \
            --file Dockerfile .
          
          # Limpar arquivos de secrets
          rm -f redis_pass.txt jwt_secret.txt
          
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

# ----------------------------------------------------------------------
# JOB 4 ▸ DEPLOY SELF‑HOSTED (Docker Swarm + secrets)
# ----------------------------------------------------------------------

  deploy-selfhosted:
    needs: build-image
    runs-on: [ self-hosted, Linux, X64, conexao, conexao-de-sorte-backend-chatbot ]
    timeout-minutes: 8
    if: |
      github.ref == 'refs/heads/main' &&
      (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production'))
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Login GHCR (Self-hosted)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull imagem do GHCR
        run: docker pull "${{ needs.build-image.outputs.image }}"

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false

      - name: Carregar todos os segredos do Azure Key Vault
        shell: bash
        run: |
          set -euo pipefail
          VAULT_ENDPOINT="${{ secrets.AZURE_KEYVAULT_ENDPOINT }}"
          if [[ "$VAULT_ENDPOINT" =~ https://([^.]+)\.vault\.azure\.net ]]; then
            VAULT="${BASH_REMATCH[1]}"
          else
            echo "ERROR: Invalid AZURE_KEYVAULT_ENDPOINT format: $VAULT_ENDPOINT" >&2
            exit 1
          fi
          
          echo "🔐 Loading all secrets from Azure Key Vault: $VAULT" >&2
          
          # Função para obter secret com fallback gracioso
          get_secret() {
            local secret_name="$1"
            local fallback_value="$2"
            local secret_value
            
            secret_value=$(az keyvault secret show --vault-name "$VAULT" --name "$secret_name" --query value -o tsv 2>/dev/null || echo "")
            if [ -z "$secret_value" ]; then
              if [ -n "$fallback_value" ]; then
                echo "⚠️ Secret $secret_name not found, using fallback" >&2
                echo "$fallback_value"
              else
                echo "❌ Secret $secret_name not found and no fallback provided" >&2
                return 1
              fi
            else
              echo "✅ Secret $secret_name loaded successfully" >&2
              echo "$secret_value"
            fi
          }
          
          # Carregar segredos com fallbacks seguros
          REDIS_HOST=$(get_secret "conexao-de-sorte-redis-host" "localhost")
          REDIS_PORT=$(get_secret "conexao-de-sorte-redis-port" "6379")
          REDIS_PASSWORD=$(get_secret "conexao-de-sorte-redis-password" "")
          REDIS_DATABASE=$(get_secret "conexao-de-sorte-redis-database" "5")
          
          JWT_SECRET=$(get_secret "conexao-de-sorte-jwt-secret" "")
          JWT_ISSUER=$(get_secret "conexao-de-sorte-jwt-issuer" "https://conexaodesorte.com.br")
          
          CORS_ALLOWED_ORIGINS=$(get_secret "conexao-de-sorte-cors-allowed-origins" "https://conexaodesorte.com.br")
          CORS_ALLOW_CREDENTIALS=$(get_secret "conexao-de-sorte-cors-allow-credentials" "false")
          
          # Criar/atualizar Docker secrets
          printf "%s" "$REDIS_PASSWORD" | docker secret create chatbot_redis_password - 2>/dev/null || docker secret update chatbot_redis_password -
          printf "%s" "$JWT_SECRET" | docker secret create chatbot_jwt_secret - 2>/dev/null || docker secret update chatbot_jwt_secret -
          
          # Salvar variáveis de ambiente para o próximo step
          echo "REDIS_HOST=$REDIS_HOST" >> $GITHUB_ENV
          echo "REDIS_PORT=$REDIS_PORT" >> $GITHUB_ENV
          echo "REDIS_DATABASE=$REDIS_DATABASE" >> $GITHUB_ENV
          echo "JWT_ISSUER=$JWT_ISSUER" >> $GITHUB_ENV
          echo "CORS_ALLOWED_ORIGINS=$CORS_ALLOWED_ORIGINS" >> $GITHUB_ENV
          echo "CORS_ALLOW_CREDENTIALS=$CORS_ALLOW_CREDENTIALS" >> $GITHUB_ENV

      - name: 🧹 Cleanup existing deployment
        run: |
          # Remove stack existente se houver
          docker stack rm conexao-chatbot 2>/dev/null || true
          
          # Aguardar limpeza completa
          echo "⏳ Aguardando limpeza completa..."
          sleep 15
          
          # Limpar containers órfãos do serviço chatbot
          docker container ls -q --filter "name=chatbot" | xargs -r docker stop
          docker container ls -aq --filter "name=chatbot" | xargs -r docker rm
          
          echo "✅ Limpeza concluída"

      - name: Deploy/Update Chatbot (docker service update/create)
        run: |
          IMAGE="${{ needs.build-image.outputs.image }}"
          SERVICE_NAME="conexao-chatbot_chatbot"
          NETWORK_NAME="conexao-network-swarm"

          echo "🔗 Garantindo rede $NETWORK_NAME (overlay attachable)"
          docker network create --driver overlay --attachable "$NETWORK_NAME" 2>/dev/null || true

          echo "🔍 Verificando existência do serviço $SERVICE_NAME"
          if docker service ls --format '{{.Name}}' | grep -qx "$SERVICE_NAME"; then
            echo "🔄 Serviço existe - UPDATE"
            timeout 60s docker service update \
              --image "$IMAGE" \
              --env-add SPRING_PROFILES_ACTIVE=prod,azure \
              --env-add TZ=America/Sao_Paulo \
              --env-add SERVER_PORT=8080 \
              --env-add SPRING_DATA_REDIS_HOST="${REDIS_HOST:-conexao-redis}" \
              --env-add SPRING_DATA_REDIS_PORT="${REDIS_PORT:-6379}" \
              --env-add SPRING_DATA_REDIS_DATABASE="${REDIS_DATABASE:-9}" \
              --env-add JWT_ISSUER="${JWT_ISSUER:-https://conexaodesorte.com.br}" \
              --env-add CORS_ALLOWED_ORIGINS="${CORS_ALLOWED_ORIGINS:-*}" \
              --env-add CORS_ALLOW_CREDENTIALS="${CORS_ALLOW_CREDENTIALS:-true}" \
              --network-add "$NETWORK_NAME" \
              --detach=false \
              --update-parallelism 1 \
              --update-delay 10s \
              "$SERVICE_NAME"
          else
            echo "🆕 Serviço não existe - CREATE"
            timeout 120s docker service create \
              --name "$SERVICE_NAME" \
              --replicas 1 \
              --network "$NETWORK_NAME" \
              --restart-condition any \
              --restart-max-attempts 20 \
              --restart-delay 2m \
              --restart-window 15m \
              --env SPRING_PROFILES_ACTIVE=prod,azure \
              --env TZ=America/Sao_Paulo \
              --env SERVER_PORT=8080 \
              --env SPRING_DATA_REDIS_HOST="${REDIS_HOST:-conexao-redis}" \
              --env SPRING_DATA_REDIS_PORT="${REDIS_PORT:-6379}" \
              --env SPRING_DATA_REDIS_DATABASE="${REDIS_DATABASE:-9}" \
              --env JWT_ISSUER="${JWT_ISSUER:-https://conexaodesorte.com.br}" \
              --env CORS_ALLOWED_ORIGINS="${CORS_ALLOWED_ORIGINS:-*}" \
              --env CORS_ALLOW_CREDENTIALS="${CORS_ALLOW_CREDENTIALS:-true}" \
              --publish published=8099,target=8080,protocol=tcp \
              "$IMAGE"
          fi

      - name: Aguardar Chatbot estar pronto
        run: |
          echo "⏳ Aguardando Chatbot ficar pronto..."
          TIMEOUT=180
          ELAPSED=0
          
          while [ $ELAPSED -lt $TIMEOUT ]; do
            if docker service ls | grep -q "chatbot.*1/1"; then
              echo "✅ Chatbot está pronto!"
              break
            fi
            echo "⏳ Aguardando readiness... ($ELAPSED/$TIMEOUT segundos)"
            sleep 10
            ELAPSED=$((ELAPSED + 10))
          done
          
          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "❌ Chatbot não ficou pronto em $TIMEOUT segundos"
            echo "📋 Status dos serviços:"
            docker service ls | grep chatbot || true
            echo "📋 Logs do Chatbot:"
            docker service logs conexao-chatbot_chatbot --tail 50 || true
            exit 1
          fi

      - name: Health‑check Chatbot
        run: |
          echo "🔍 Verificando saúde do Chatbot..."
          docker service ls | grep chatbot
          
          # Teste do endpoint de health
          SERVICE_CONTAINER=$(docker ps --filter "name=chatbot" --format "{{.Names}}" | head -1 || echo "")
          if [ -n "$SERVICE_CONTAINER" ]; then
            echo "🌐 Testando health endpoint..."
            docker exec "$SERVICE_CONTAINER" curl -f http://localhost:8080/actuator/health 2>/dev/null && echo "✅ Chatbot health OK" || echo "⚠️ Chatbot health test failed"
          fi
          
          echo "🎉 Chatbot microservice deployment completed successfully!"
          echo "🌐 API: https://chatbot.conexaodesorte.com.br"

# ----------------------------------------------------------------------
# JOB 5 ▸ NOTIFY
# ----------------------------------------------------------------------

  notify:
    if: always()
    runs-on: ubuntu-latest
    needs: [ build-test-scan, deploy-selfhosted ]
    steps:
      - name: Slack notify
        env:
          WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          RESULT: ${{ needs.deploy-selfhosted.result }}
        shell: bash
        run: |
          if [ -z "$WEBHOOK" ]; then
            echo "ℹ️ Slack webhook não configurado; etapa ignorada" && exit 0
          fi
          COLOR=good && [ "$RESULT" != "success" ] && COLOR=danger
          curl -X POST -H 'Content-type: application/json' \
               --data "{\"text\":\"Chatbot – $RESULT\",\"attachments\":[{\"color\":\"$COLOR\"}]}" \
               "$WEBHOOK"
